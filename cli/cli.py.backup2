"""
Interfaz de línea de comandos para Backgammon.

Este módulo proporciona una CLI completa con visualización ASCII del tablero,
gestión de comandos interactivos y feedback visual detallado.
"""

from core.game import BackgammonJuego


class BackgammonCLI:
    """
    Interfaz de línea de comandos para Backgammon.
    
    Proporciona una interfaz interactiva con visualización del tablero,
    gestión de comandos y feedback visual para los jugadores.
    
    Attributes:
        __juego__: Instancia del juego de Backgammon
    """
    
    def __init__(self):
    """Inicializa la CLI con una nueva instancia del juego."""
    self.__juego__ = BackgammonJuego()

    def mostrar_tablero_visual(self):
        """
        Muestra una representación visual del tablero en formato ASCII.
        
        El tablero se muestra dividido en dos mitades:
        - Superior: puntos 13-24
        - Inferior: puntos 12-1
        
        Las fichas se representan con símbolos:
        - 'X' para jugador 1 (blancas)
        - 'O' para jugador 2 (negras)
        - Números cuando hay más de 5 fichas en un punto
        """
        tablero = self.__juego.tablero
        
        print("\n" + "=" * 80)
        print("                        🎲 BACKGAMMON - TABLERO 🎲")
        print("=" * 80)
        
        # Encabezado superior (puntos 13-24)
        print("\n  13  14  15  16  17  18 |BAR| 19  20  21  22  23  24")
        print(" " + "-" * 77)
        
        # Parte superior del tablero
        self._mostrar_mitad_superior(tablero)
        
        print(" " + "-" * 77)
        
        # Parte inferior del tablero
        self._mostrar_mitad_inferior(tablero)
        
        print(" " + "-" * 77)
        print("  12  11  10   9   8   7 |BAR|  6   5   4   3   2   1")
        
        # Información adicional
        self._mostrar_info_barra()
        self._mostrar_dados_disponibles()
        
        print("=" * 80 + "\n")

    def _mostrar_mitad_superior(self, tablero):
        """
        Muestra la mitad superior del tablero (puntos 13-24).
        
        Args:
            tablero: Instancia de Tablero con el estado actual
        """
        max_altura = 5
        
        for fila in range(max_altura):
            linea = " "
            
            # Puntos 13-18
            for punto in range(12, 18):
                simbolo = self._obtener_simbolo_para_punto(tablero, punto, fila)
                linea += f" {simbolo}  "
            
            # Barra (muestra fichas capturadas)
            linea += self._formato_barra(fila)
            
            # Puntos 19-24
            for punto in range(18, 24):
                simbolo = self._obtener_simbolo_para_punto(tablero, punto, fila)
                linea += f" {simbolo}  "
            
            print(linea)

    def _mostrar_mitad_inferior(self, tablero):
        """
        Muestra la mitad inferior del tablero (puntos 1-12).
        
        Args:
            tablero: Instancia de Tablero con el estado actual
        """
        max_altura = 5
        
        for fila in range(max_altura - 1, -1, -1):
            linea = " "
            
            # Puntos 12-7 (invertidos para visualización)
            for punto in range(11, 5, -1):
                simbolo = self._obtener_simbolo_para_punto(tablero, punto, fila)
                linea += f" {simbolo}  "
            
            # Barra (espacio vacío en mitad inferior)
            linea += "|  | "
            
            # Puntos 6-1 (invertidos para visualización)
            for punto in range(5, -1, -1):
                simbolo = self._obtener_simbolo_para_punto(tablero, punto, fila)
                linea += f" {simbolo}  "
            
            print(linea)

    def _obtener_simbolo_para_punto(self, tablero, punto, fila):
        """
        Obtiene el símbolo a mostrar para un punto en una fila específica.
        
        Args:
            tablero: Instancia de Tablero
            punto: Número del punto (0-23)
            fila: Número de fila (0-4)
            
        Returns:
            str: Símbolo a mostrar ('X', 'O', número o espacio)
        """
        cantidad = tablero.fichas_en(punto)
        
        if cantidad == 0:
            return " "
        
        if fila < min(cantidad, 5):
            # Mostrar la ficha correspondiente
            ficha = tablero.ficha_en(punto)
            return ficha if ficha else " "
        elif fila == 4 and cantidad > 5:
            # Si hay más de 5 fichas, mostrar el número en la última fila
            return str(cantidad)
        
        return " "

    def _formato_barra(self, fila):
        """
        Formatea la visualización de la barra con fichas capturadas.
        
        Args:
            fila: Número de fila (0-4)
            
        Returns:
            str: String formateado para la barra
        """
        barra_x = len(self.__juego.tablero.barra_x)
        barra_o = len(self.__juego.tablero.barra_o)
        
        linea = "|"
        if fila == 0 and barra_x > 0:
            linea += f"X{barra_x:1d}"
        elif fila == 1 and barra_o > 0:
            linea += f"O{barra_o:1d}"
        else:
            linea += "  "
        linea += "| "
        
        return linea

    def _mostrar_info_barra(self):
        """Muestra información sobre fichas capturadas en la barra."""
        barra_x = len(self.__juego.tablero.barra_x)
        barra_o = len(self.__juego.tablero.barra_o)
        
        if barra_x > 0 or barra_o > 0:
            print(f"\n 📊 Fichas en barra: X={barra_x}, O={barra_o}")
            if barra_x > 0:
                print("    ⚠️  Jugador X debe reingresar fichas desde la barra")
            if barra_o > 0:
                print("    ⚠️  Jugador O debe reingresar fichas desde la barra")

    def _mostrar_dados_disponibles(self):
        """Muestra los dados disponibles para usar en el turno actual."""
        if hasattr(self.__juego, 'movimientos_disponibles'):
            movimientos = self.__juego.movimientos_disponibles()
            if movimientos:
                print(f" 🎲 Dados disponibles: {movimientos}")
                print(f" 👤 Turno actual: Jugador {'X' if self.__juego.turno == 1 else 'O'}")
            else:
                print(f" 👤 Turno: Jugador {'X' if self.__juego.turno == 1 else 'O'} - Sin dados disponibles")

    def mostrar_ayuda(self):
        """
        Muestra la lista de comandos disponibles con descripciones detalladas.
        
        Incluye ejemplos de uso y tips para una mejor experiencia.
        """
        print("\n" + "=" * 70)
        print("                    📋 COMANDOS DISPONIBLES")
        print("=" * 70)
        print("\n  VISUALIZACIÓN:")
        print("    tablero         - Muestra el tablero visual completo")
        print("    estado          - Muestra el estado resumido del juego")
        print("    ayuda           - Muestra esta ayuda")
        print("\n  ACCIONES DEL JUEGO:")
        print("    tirar           - Tira los dados (inicia tu turno)")
        print("    mover X Y       - Mueve ficha del punto X al punto Y")
        print("                      Ejemplo: mover 6 4")
        print("    mover -1 Y      - Reingresa ficha desde la barra al punto Y")
        print("                      Ejemplo: mover -1 5")
        print("\n  GESTIÓN:")
        print("    reiniciar       - Reinicia el juego desde cero")
        print("    salir           - Sale del juego")
        print("\n  💡 TIPS:")
        print("    • Los puntos se numeran de 1 a 24")
        print("    • Usa -1 como origen para reingresar desde la barra")
        print("    • Debes usar todos los dados disponibles antes de cambiar turno")
        print("    • Si no puedes mover, el turno pasa automáticamente")
        print("=" * 70 + "\n")

    def mostrar_bienvenida(self):
        """Muestra el mensaje de bienvenida con arte ASCII."""
        print("\n" + "=" * 80)
        print("""
    ╔═══════════════════════════════════════════════════════════════════════╗
    ║                                                                       ║
    ║               🎲  B A C K G A M M O N  -  C L I  🎲                  ║
    ║                                                                       ║
    ║                   ¡Bienvenido al juego de estrategia                 ║
    ║                         más antiguo del mundo!                        ║
    ║                                                                       ║
    ╚═══════════════════════════════════════════════════════════════════════╝
        """)
        print("=" * 80)
        print("\n  📖 Reglas básicas:")
        print("     • Cada jugador debe mover todas sus fichas hacia su home")
        print("     • Los movimientos se hacen según los dados tirados")
        print("     • Captura fichas del oponente dejándolas en puntos solitarios")
        print("     • Gana quien saque todas sus fichas del tablero primero")
        print("\n" + "=" * 80 + "\n")

    def iniciar(self):
        """
        Inicia el juego desde la CLI y entra en un loop de comandos.
        
        Gestiona el flujo del juego, procesa comandos del usuario y
        verifica condiciones de victoria.
        """
        self.mostrar_bienvenida()
        self.__juego.iniciar()
        print("✅ El juego ha comenzado. ¡Buena suerte!")
        self.mostrar_ayuda()
        self.mostrar_tablero_visual()
        self.mostrar_estado()

        while True:
            # Verificar si hay ganador
            ganador = self.__juego.verificar_ganador()
            if ganador:
                self._mostrar_victoria(ganador)
            
            cmd = input("\n> ").strip().lower()
            
            if not cmd:
                continue
            
            if cmd in ("salir", "exit", "q"):
                self.salir()
                break
            
            if cmd in ("ayuda", "help", "h", "?"):
                self.mostrar_ayuda()
                continue
            
            if cmd == "tablero":
                self.mostrar_tablero_visual()
                continue
            
            if cmd == "estado":
                self.mostrar_estado()
                continue
            
            if cmd == "reiniciar":
                self.reiniciar_juego()
                continue
            
            if cmd == "tirar":
                self._procesar_tirada(ganador)
                continue
            
            if cmd.startswith("mover"):
                self._procesar_movimiento(cmd, ganador)
                continue
            
            print("❌ Comando no reconocido. Escribe 'ayuda' para ver los comandos disponibles.")

    def _mostrar_victoria(self, ganador):
        """
        Muestra el mensaje de victoria con formato especial.
        
        Args:
            ganador: Identificador del jugador ganador
        """
        print("\n" + "🎉" * 40)
        print("\n              ¡¡¡ F E L I C I T A C I O N E S !!!")
        print(f"\n                El Jugador {ganador} ha GANADO")
        print("\n" + "🎉" * 40)
        print("\n  Puedes escribir 'reiniciar' para jugar de nuevo")
        print("  o 'salir' para terminar.\n")

    def _procesar_tirada(self, ganador):
        """
        Procesa el comando de tirar dados.
        
        Args:
            ganador: Identificador del ganador (None si no hay)
        """
        if ganador:
            print("⚠️  La partida ya terminó. Reinicia para jugar de nuevo.")
            return
        
        vals = self.__juego.tirar_dados()
        movs = self.__juego.movimientos_disponibles()
        
        print(f"\n🎲 Dados tirados: {vals}")
        print(f"📊 Movimientos disponibles: {movs}")
        
        if not movs:
            print("⚠️  No hay movimientos posibles con estos dados.")
            print("⏭️  Cambiando turno automáticamente...")
            self.__juego.cambiar_turno()
            jugador_actual = 'X' if self.__juego.turno == 1 else 'O'
            print(f"🔄 Turno del Jugador {jugador_actual}")

    def _procesar_movimiento(self, cmd, ganador):
        """
        Procesa el comando de mover ficha.
        
        Args:
            cmd: Comando ingresado por el usuario
            ganador: Identificador del ganador (None si no hay)
        """
        if ganador:
            print("⚠️  La partida ya terminó. Reinicia para jugar de nuevo.")
            return
        
        parts = cmd.split()
        if len(parts) != 3:
            print("❌ Uso incorrecto del comando mover")
            print("   Formato: mover <origen> <destino>")
            print("   Ejemplo: mover 6 4  (mueve ficha del punto 6 al 4)")
            print("   Ejemplo: mover -1 5  (reingresa desde barra al punto 5)")
            return
        
        try:
            origen = int(parts[1])
            destino = int(parts[2])
        except ValueError:
            print("❌ Origen y destino deben ser números enteros.")
            return
        
        ok = self.__juego.aplicar_movimiento(origen, destino)
        if ok:
            print("✅ Movimiento aplicado correctamente.")
            self.mostrar_tablero_visual()
            
            # Verificar si quedan dados disponibles
            if not self.__juego.tiene_dados_disponibles():
                print("\n⏭️  No quedan dados disponibles. Fin del turno.")
                self.__juego.cambiar_turno()
                jugador_actual = self.__juego.jugador_x.nombre if self.__juego.turno == 1 else self.__juego.jugador_o.nombre
                print(f"🔄 Turno de {jugador_actual}")
        else:
            print("❌ Movimiento inválido. Verifica:")
            print("   • Que tengas dados disponibles para ese movimiento")
            print("   • Que el punto de origen tenga tus fichas")
            print("   • Que el punto de destino no esté bloqueado")
            print("   • Si tienes fichas en la barra, debes reingresarlas primero")

    def mostrar_estado(self):
        """
        Muestra el estado actual del juego de forma detallada.
        
        Incluye información sobre turno, dados y estado general.
        """
        print("\n" + "─" * 70)
        print("📊 ESTADO DEL JUEGO")
        print("─" * 70)
        print(self.__juego.descripcion())
        print("─" * 70 + "\n")

    def reiniciar_juego(self):
        """Reinicia el juego y muestra confirmación con tablero inicial."""
        self.__juego.reiniciar()
        print("\n🔄 El juego se ha reiniciado correctamente\n")
        self.mostrar_tablero_visual()
        self.mostrar_estado()

    def salir(self):
        """Sale del juego mostrando un mensaje de despedida."""
        print("\n" + "=" * 70)
        print("\n          👋 Gracias por jugar Backgammon")
        print("                ¡Hasta la próxima!")
        print("\n" + "=" * 70 + "\n")


def ejecutar_cli():
    """
    Función auxiliar para ejecutar la CLI.
    
    Esta función sirve como punto de entrada para iniciar
    la interfaz de línea de comandos del juego.
    """
    cli = BackgammonCLI()
    cli.iniciar()